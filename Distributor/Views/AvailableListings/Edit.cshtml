@using Distributor.Enums
@using Distributor.Helpers

@model Distributor.ViewModels.AvailableListingEditView

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <!-- Code to wire up your DatePicker -->
    <script type="text/javascript">
        $(function () {
            // This will make every element with the class "date-picker" into a DatePicker element
            $('.date-picker').datepicker();
        })

        $(document).ready(function () {
            var type = $("#detailtype").text();
            if (type == "Show Details") {
                $("#setstyle").prop('disabled', true);
            }
        });
    </script>
}

<nav class="navbar navbar-fixed-top">
    <div class="navbar-inverse">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                @Html.ActionLink("Distributor", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li>@Html.ActionLink("About", "About", "Home")</li>
                    <li>@Html.ActionLink("Contact", "Contact", "Home")</li>
                </ul>
                @Html.Partial("_LoginPartial")
            </div>
        </div>
    </div>
    <nav class="navbar navbar-default">
        <div class="container">
            <!-- Brand and toggle get grouped for better mobile display -->
            <div class="navbar-header">
                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                @*<a class="navbar-brand" href="#">Brand</a>*@
            </div>

            <!-- Collect the nav links, forms, and other content for toggling -->
            <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
                <ul class="nav navbar-nav">
                    <li class="disabled">@Html.ActionLink("MANAGE LISTINGS", "General", "Home")</li>
                    <li>@Html.ActionLink("Requests", "Requirements", "ManageListings")</li>
                    <li class="active">@Html.ActionLink("Available", "Available", "ManageListings")</li>
                    <li>@Html.ActionLink("Campaigns", "Campaigns", "ManageListings")</li>
                    <li>@Html.ActionLink("Offers", "Offers", "ManageListings")</li>
                    <li>@Html.ActionLink("Orders", "Orders", "ManageListings")</li>
                </ul>
            </div><!-- /.navbar-collapse -->
        </div><!-- /.container -->
    </nav>
</nav>

@if (ViewBag.ShowHistory)
{
    <div class="row" style="padding-top:55px">
        <div class="col-lg-12">
            <h1 class="page-header" style="margin: 10px 0px 10px">Available History <small>Show Details</small></h1>
            <ol class="breadcrumb">
                <li>@Html.ActionLink("Home", "Index", "Home")</li>
                <li>@Html.ActionLink("Available", "Available", "ManageListings")</li>
                <li>@Html.ActionLink("Available History", "History", "AvailableListings")</li>
                <li class="active" id="detailtype">Show Details</li>
            </ol>
            <p class="lead">Your current available listings.</p>
        </div>
    </div>
}
else
{
    <div class="row" style="padding-top:55px">
        <div class="col-lg-12">
            <h1 class="page-header" style="margin: 10px 0px 10px">Available Listing <small>Edit Details</small></h1>
            <ol class="breadcrumb">
                <li>@Html.ActionLink("Home", "Index", "Home")</li>
                <li>@Html.ActionLink("Available", "Available", "ManageListings")</li>
                <li class="active" id="detailtype">Edit Details</li>
            </ol>
            <p class="lead">Your current available listings.</p>
        </div>
    </div>
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="row" id="setstyle">
        <div class="col-md-6">
            <div class="login-panel panel panel-primary">
                <div class="panel-heading">
                    <h3 class="panel-title">Listing details</h3>
                </div>
                <div class="panel-body">
                    <div class="form-horizontal">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.ListingId)
                        @Html.HiddenFor(model => model.ListingAppUser)
                        @Html.HiddenFor(model => model.ListingBranchDetails)
                        @Html.HiddenFor(model => model.ListingCompanyDetails)

                        <div class="form-group">
                            <div class="col-md-4 control-label">@Html.LabelFor(model => model.ItemDescription)</div>
                            <div class="col-md-8">
                                @if (Model.ListingStatus == ItemEnums.ItemRequiredListingStatusEnum.Open)
                                {
                                    @Html.EditorFor(model => model.ItemDescription, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ItemDescription, "", new { @class = "text-danger" })
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.ItemDescription)
                                    @Html.DisplayFor(model => model.ItemDescription)
                                }
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-4 control-label">@Html.LabelFor(model => model.ItemType)</div>
                            <div class="col-md-8">
                                @if (Model.ListingStatus == ItemEnums.ItemRequiredListingStatusEnum.Open)
                                {
                                    @Html.EnumDropDownListFor(model => model.ItemType, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.ItemType, "", new { @class = "text-danger" })
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.ItemType)
                                    <p>@Model.ItemType.DisplayName()</p>
                                }
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-4 control-label">@Html.LabelFor(model => model.QuantityRequired)</div>
                            <div class="col-md-8">
                                @if (Model.ListingStatus == ItemEnums.ItemRequiredListingStatusEnum.Open)
                                {
                                    @Html.EditorFor(model => model.QuantityRequired, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.QuantityRequired, "", new { @class = "text-danger" })
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.QuantityRequired)
                                    @Html.DisplayFor(model => model.QuantityRequired)
                                }
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-4 control-label">@Html.LabelFor(model => model.QuantityFulfilled)</div>
                            <div class="col-md-8">
                                @if (Model.ListingStatus == ItemEnums.ItemRequiredListingStatusEnum.Open)
                                {
                                    @Html.EditorFor(model => model.QuantityFulfilled, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.QuantityFulfilled, "", new { @class = "text-danger" })
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.QuantityFulfilled)
                                    @Html.DisplayFor(model => model.QuantityFulfilled)
                                }
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-4 control-label">@Html.LabelFor(model => model.QuantityOutstanding)</div>
                            <div class="col-md-8">
                                @if (Model.ListingStatus == ItemEnums.ItemRequiredListingStatusEnum.Open)
                                {
                                    @Html.EditorFor(model => model.QuantityOutstanding, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.QuantityOutstanding, "", new { @class = "text-danger" })
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.QuantityOutstanding)
                                    @Html.DisplayFor(model => model.QuantityOutstanding)
                                }
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-4 control-label">@Html.LabelFor(model => model.UoM)</div>
                            <div class="col-md-8">
                                @if (Model.ListingStatus == ItemEnums.ItemRequiredListingStatusEnum.Open)
                                {
                                    @Html.EditorFor(model => model.UoM, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.UoM, "", new { @class = "text-danger" })
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.UoM)
                                    @Html.DisplayFor(model => model.UoM)
                                }
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-4 control-label">@Html.LabelFor(model => model.AvailableFrom)</div>
                            <div class="col-md-8">
                                @if (Model.ListingStatus == ItemEnums.ItemRequiredListingStatusEnum.Open)
                                {
                                    @Html.EditorFor(model => model.AvailableFrom, new { htmlAttributes = new { @class = "form-control date-picker" } })
                                    @Html.ValidationMessageFor(model => model.AvailableFrom, "", new { @class = "text-danger" })
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.AvailableFrom)
                                    @Html.DisplayFor(model => model.AvailableFrom)
                                }
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-4 control-label">@Html.LabelFor(model => model.AvailableTo)</div>
                            <div class="col-md-8">
                                @if (Model.ListingStatus == ItemEnums.ItemRequiredListingStatusEnum.Open)
                                {
                                    @Html.EditorFor(model => model.AvailableTo, new { htmlAttributes = new { @class = "form-control date-picker" } })
                                    @Html.ValidationMessageFor(model => model.AvailableTo, "", new { @class = "text-danger" })
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.AvailableTo)
                                    @Html.DisplayFor(model => model.AvailableTo)
                                }
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-4 control-label">@Html.LabelFor(model => model.ItemCondition)</div>
                            <div class="col-md-8">
                                @if (Model.ListingStatus == ItemEnums.ItemRequiredListingStatusEnum.Open)
                                {
                                    @Html.EnumDropDownListFor(model => model.ItemCondition, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.ItemCondition, "", new { @class = "text-danger" })
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.ItemCondition)
                                    <p>@Model.ItemCondition.DisplayName()</p>
                                }
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-4 control-label">@Html.LabelFor(model => model.DisplayUntilDate)</div>
                            <div class="col-md-8">
                                @if (Model.ListingStatus == ItemEnums.ItemRequiredListingStatusEnum.Open)
                                {
                                    @Html.EditorFor(model => model.DisplayUntilDate, new { htmlAttributes = new { @class = "form-control date-picker" } })
                                    @Html.ValidationMessageFor(model => model.DisplayUntilDate, "", new { @class = "text-danger" })
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.DisplayUntilDate)
                                    @Html.DisplayFor(model => model.DisplayUntilDate)
                                }
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-4 control-label">@Html.LabelFor(model => model.SellByDate)</div>
                            <div class="col-md-8">
                                @if (Model.ListingStatus == ItemEnums.ItemRequiredListingStatusEnum.Open)
                                {
                                    @Html.EditorFor(model => model.SellByDate, new { htmlAttributes = new { @class = "form-control date-picker" } })
                                    @Html.ValidationMessageFor(model => model.SellByDate, "", new { @class = "text-danger" })
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.SellByDate)
                                    @Html.DisplayFor(model => model.SellByDate)
                                }
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-4 control-label">@Html.LabelFor(model => model.UseByDate)</div>
                            <div class="col-md-8">
                                @if (Model.ListingStatus == ItemEnums.ItemRequiredListingStatusEnum.Open)
                                {
                                    @Html.EditorFor(model => model.UseByDate, new { htmlAttributes = new { @class = "form-control date-picker" } })
                                    @Html.ValidationMessageFor(model => model.UseByDate, "", new { @class = "text-danger" })
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.UseByDate)
                                    @Html.DisplayFor(model => model.UseByDate)
                                }
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-4 control-label">@Html.LabelFor(model => model.DeliveryAvailable)</div>
                            <div class="col-md-8">
                                @if (Model.ListingStatus == ItemEnums.ItemRequiredListingStatusEnum.Open)
                                {
                                    @Html.EditorFor(model => model.DeliveryAvailable, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.DeliveryAvailable, "", new { @class = "text-danger" })
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.DeliveryAvailable)
                                    <p>@Model.DeliveryAvailable</p>
                                }
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-4 control-label">@Html.LabelFor(model => model.ListingStatus)</div>
                            <div class="col-md-8">
                                @Html.EnumDropDownListFor(model => model.ListingStatus, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ListingStatus, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="login-panel panel panel-info">
                <div class="panel-heading">
                    <h3 class="panel-title">Listing created by</h3>
                </div>
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-4">@Html.LabelFor(model => model.ListingAppUser.FirstName)</div>
                        <div class="col-md-8">@Html.DisplayFor(model => model.ListingAppUser.FirstName)</div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">@Html.LabelFor(model => model.ListingAppUser.LastName)</div>
                        <div class="col-md-8">@Html.DisplayFor(model => model.ListingAppUser.LastName)</div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-md-4">@Html.LabelFor(model => model.ListingBranchDetails.BranchName)</div>
                        <div class="col-md-8">@Html.DisplayFor(model => model.ListingBranchDetails.BranchName)</div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">@Html.LabelFor(model => model.ListingBranchDetails.AddressLine1)</div>
                        <div class="col-md-8">@Html.DisplayFor(model => model.ListingBranchDetails.AddressLine1)</div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">@Html.LabelFor(model => model.ListingBranchDetails.AddressTownCity)</div>
                        <div class="col-md-8">@Html.DisplayFor(model => model.ListingBranchDetails.AddressTownCity)</div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">@Html.LabelFor(model => model.ListingBranchDetails.AddressCounty)</div>
                        <div class="col-md-8">@Html.DisplayFor(model => model.ListingBranchDetails.AddressCounty)</div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">@Html.LabelFor(model => model.ListingBranchDetails.AddressPostcode)</div>
                        <div class="col-md-8">@Html.DisplayFor(model => model.ListingBranchDetails.AddressPostcode)</div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-md-4">@Html.LabelFor(model => model.ListingOriginatorDateTime)</div>
                        <div class="col-md-8">@Html.DisplayFor(model => model.ListingOriginatorDateTime)</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    if (ViewBag.ShowHistory == false)
    {
        <div class="form-group">
            <input type="submit" value="Submit" name="submitbutton" class="btn btn-success" />
            <input type="submit" value="Reset" name="resetbutton" class="btn btn-danger" />
        </div>
    }
}
